/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/site-headings.glb 
*/

import React, {
  useRef,
  useEffect,
  forwardRef,
  useImperativeHandle,
} from "react";
import { Float, useGLTF } from "@react-three/drei";
import * as THREE from "three";

import gsap from "gsap";

const isDevelopment = import.meta.env.DEV;

const newHeaderurl = "/FontWorkWebpage.glb";
const localModelUrl = "/site-headings.glb";
const remoteModelUrl =
  "https://files.creative-directors.com/creative-website/creative25/glbs/site-headings.glb"; // Corrected remote URL if needed
const modelUrl = isDevelopment ? localModelUrl : remoteModelUrl;
export const CDtext = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF(modelUrl);

  // References to all letter meshes
  const letterRefs = useRef([]);
  const groupRef = useRef();
  const timelineRef = useRef(null);

  const textMaterials = new THREE.MeshStandardMaterial({
    color: "gold",
    roughness: 0.1,
    metalness: 0.8,
    emissive: "black",
    emissiveIntensity: 0.5,
  });
  materials.blau = textMaterials;
  // materials.weiß = textMaterials;

  // Expose methods to parent components through ref
  useImperativeHandle(ref, () => ({
    // Play the intro animation
    playIntroAnimation: () => {
      if (timelineRef.current) {
        timelineRef.current.restart();
        return timelineRef.current.duration();
      }
      return 0;
    },
    // Set emissive intensity (for glow effects)
    setEmissiveIntensity: (intensity = 0.5) => {
      letterRefs.current.forEach((mesh) => {
        if (mesh && mesh.material) {
          gsap.to(mesh.material, {
            emissiveIntensity: intensity,
            duration: 0.5,
          });
        }
      });
    },
    // Hide all letters
    hide: () => {
      letterRefs.current.forEach((mesh) => {
        if (mesh) {
          gsap.to(mesh.scale, {
            x: 0,
            y: 0,
            z: 0,
            duration: 0.3,
            ease: "power2.in",
          });
        }
      });
    },
    // Show all letters
    show: () => {
      const reversedRefs = [...letterRefs.current].reverse();
      reversedRefs.forEach((mesh, index) => {
        if (mesh) {
          const delay = index * 0.08;
          gsap.to(mesh.scale, {
            x: 1,
            y: 0.423,
            z: 1,
            duration: 0.5,
            delay,
            ease: "elastic.out(1, 0.3)",
          });
        }
      });
    },
    // move text up with gsap
    moveUp: (z = 0) => {
      if (groupRef.current) {
        gsap.to(groupRef.current.position, {
          y: groupRef.current.position.z + z,
          duration: 2,
          ease: "power2.out",
        });
      }
    },
    // Get group reference
    getGroupRef: () => groupRef.current,
  }));

  // Animation setup
  useEffect(() => {
    if (!letterRefs.current.length) return;

    // Reset any existing animations
    gsap.killTweensOf(letterRefs.current);

    // Initial state
    letterRefs.current.forEach((mesh) => {
      if (mesh) {
        gsap.set(mesh.scale, { x: 0, y: 0, z: 0 });
        gsap.set(mesh.rotation, { x: 0, y: 0, z: 0 });
      }
    });

    // Create the main animation timeline
    const tl = gsap.timeline({ repeat: 0 });
    timelineRef.current = tl;

    // Get the reversed array reference to animate from start to end
    // The original array is ordered from right to left based on the positions
    const reversedRefs = [...letterRefs.current].reverse();

    // Animate each letter with a staggered effect (now in reverse order)
    reversedRefs.forEach((mesh, index) => {
      if (!mesh) return;

      // Calculate delay for staggered animation
      const delay = index * 0.08;

      // Pop-in animation
      tl.to(
        mesh.scale,
        {
          x: 1,
          y: 0.423,
          z: 1,
          duration: 0.5,
          ease: "elastic.out(1, 0.3)",
          // delay,
        },
        0
      );

      // Add small rotation for extra flair
      // tl.to(
      //   mesh.rotation,
      //   {
      //     y: Math.PI * 2,
      //     duration: 1,
      //     ease: "power2.out",
      //     delay: delay + 0.1,
      //   },
      //   0
      // );

      // Subtle hover animation after the intro
      // tl.to(
      //   mesh.position,
      //   {
      //     y: mesh.position.y + 0.05,
      //     duration: 1.5,
      //     ease: "sine.inOut",
      //     repeat: -1,
      //     yoyo: true,
      //     delay: delay + 0.5,
      //   },
      //   0.8
      // );
    });

    // Interactive animation for the whole text on hover
    if (groupRef.current) {
      groupRef.current.addEventListener("pointerenter", () => {
        gsap.to(
          letterRefs.current.map((ref) => ref.material),
          {
            emissiveIntensity: 1.0,
            duration: 0.5,
          }
        );
      });

      groupRef.current.addEventListener("pointerleave", () => {
        gsap.to(
          letterRefs.current.map((ref) => ref.material),
          {
            emissiveIntensity: 0.5,
            duration: 0.5,
          }
        );
      });
    }

    return () => {
      gsap.killTweensOf(letterRefs.current);
    };
  }, []);

  // Function to add mesh to refs array
  const addToRefs = (el) => {
    if (el && !letterRefs.current.includes(el)) {
      letterRefs.current.push(el);
    }
  };

  return (
    <group {...props} dispose={null}>
      <Float speed={1} rotationIntensity={0.05} floatIntensity={5}>
        <group position={[0, -2, -1]} ref={groupRef}>
          <group position={[4.335, -0.023, -0.368]} scale={[1, 0.423, 1]}>
            <mesh
              ref={addToRefs}
              geometry={nodes.Text262.geometry}
              material={materials.blau}
            />
            <mesh
              ref={addToRefs}
              geometry={nodes.Text262_1.geometry}
              material={materials.weiß}
            />
          </group>
          <mesh
            ref={addToRefs}
            geometry={nodes.Text020.geometry}
            material={materials.blau}
            position={[3.787, -0.031, -0.384]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text021.geometry}
            material={materials.blau}
            position={[3.177, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text022.geometry}
            material={materials.blau}
            position={[2.586, -0.031, -0.481]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text023.geometry}
            material={materials.blau}
            position={[2.015, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text024.geometry}
            material={materials.blau}
            position={[1.45, -0.031, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text025.geometry}
            material={materials.blau}
            position={[0.919, -0.031, -0.383]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text026.geometry}
            material={materials.blau}
            position={[0.54, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text027.geometry}
            material={materials.blau}
            position={[0.125, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text028.geometry}
            material={materials.blau}
            position={[-0.574, -0.031, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text029.geometry}
            material={materials.blau}
            position={[-1.121, -0.031, -0.415]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text030.geometry}
            material={materials.blau}
            position={[-1.868, -0.031, -0.481]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text031.geometry}
            material={materials.blau}
            position={[-2.441, -0.031, -0.321]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text032.geometry}
            material={materials.blau}
            position={[-3.004, -0.031, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text033.geometry}
            material={materials.blau}
            position={[-3.535, -0.031, -0.383]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text034.geometry}
            material={materials.blau}
            position={[-4.127, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text035.geometry}
            material={materials.blau}
            position={[-1.508, -0.031, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text051.geometry}
            material={materials.weiß}
            position={[3.783, -0.013, -0.393]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text052.geometry}
            material={materials.weiß}
            position={[3.177, -0.013, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text053.geometry}
            material={materials.weiß}
            position={[2.586, -0.013, -0.487]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text054.geometry}
            material={materials.weiß}
            position={[2.005, -0.013, -0.369]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text055.geometry}
            material={materials.weiß}
            position={[1.438, -0.013, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text056.geometry}
            material={materials.weiß}
            position={[0.916, -0.013, -0.393]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text057.geometry}
            material={materials.weiß}
            position={[0.54, -0.013, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text058.geometry}
            material={materials.weiß}
            position={[0.126, -0.013, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text059.geometry}
            material={materials.weiß}
            position={[-0.586, -0.013, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text060.geometry}
            material={materials.weiß}
            position={[-1.121, -0.013, -0.401]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text061.geometry}
            material={materials.weiß}
            position={[-1.508, -0.013, -0.37]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text062.geometry}
            material={materials.weiß}
            position={[-1.868, -0.013, -0.487]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text063.geometry}
            material={materials.weiß}
            position={[-2.441, -0.013, -0.332]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text064.geometry}
            material={materials.weiß}
            position={[-3.017, -0.013, -0.373]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text065.geometry}
            material={materials.weiß}
            position={[-3.539, -0.013, -0.393]}
            scale={[1, 0.423, 1]}
          />
          <mesh
            ref={addToRefs}
            geometry={nodes.Text066.geometry}
            material={materials.weiß}
            position={[-4.136, -0.013, -0.369]}
            scale={[1, 0.423, 1]}
          />
        </group>
      </Float>
    </group>
  );
});

useGLTF.preload(modelUrl);
