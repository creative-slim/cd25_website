/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/earthv4_UV.glb --transform 
Files: ./public/earthv4_UV.glb [356.76KB] > /Users/slim-cd/Documents/_Projects/__Creative Directors Website/website 2025/react-3D/cd25_website/earthv4_UV-transformed.glb [30.93KB] (91%)
*/

import React, { useRef, useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";
import { NodeToyMaterial, NodeToyTick } from "@nodetoy/react-nodetoy";
import { data } from "../shaders/waterShader";
import { data as waterfallData } from "../shaders/waterfallShader";
import { Suspense } from "react";
import { forwardRef, useImperativeHandle } from "react";

// Determine the model URL based on the environment
const isDevelopment = import.meta.env.DEV;
const localModelUrl = "src/models/earth_final-transformed.glb";
const remoteModelUrl =
  "http://files.creative-directors.com/creative-website/creative25/glbs/earth_final-transformed.glb"; // Corrected remote URL if needed
const modelUrl = isDevelopment ? localModelUrl : remoteModelUrl;

console.log(`Loading model from: ${modelUrl}`); // Log which URL is being used

export const Earth2 = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF(modelUrl);
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh rotation={[-0.1, 0.9, -1.0]} scale={1.85}>
        <sphereGeometry args={[1, 64, 64]} />
        <NodeToyMaterial url={"https://draft.nodetoy.co/qXIJYMXgUGxlmCsm"} />
        {/* <NodeToyMaterial data={data} /> */}
      </mesh>

      <mesh
        geometry={nodes["optimized-verts"].geometry}
        material={materials["Material.001"]}
        position={[0.047, 0.021, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={[1.221, 1.213, 1.214]}
      />
    </group>
  );
});

useGLTF.preload(modelUrl);
